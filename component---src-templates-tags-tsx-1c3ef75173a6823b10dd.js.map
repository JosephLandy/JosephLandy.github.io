{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/PostCard.tsx"],"names":["SiteArchiveHeader","Tags","pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","css","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","className","SiteMain","PostFeed","map","key","fields","slug","post","pageQuery","Footer","SiteFooter","SiteFooterContent","to","Date","getFullYear","footer","SiteFooterNav","href","target","rel","setLightness","colors","darkgrey","PostCard","large","frontmatter","PostCardStyles","PostCardLarge","PostCardImageLink","PostCardImage","alt","style","height","PostCardContent","PostCardContentLink","PostCardHeader","tags","PostCardPrimaryTag","join","Provider","value","color","size","PostCardTitle","featured","PostCardExcerpt","excerpt","PostCardMeta","github","website","PostCardBylineContent","timeToRead","lighten","lightgrey","darkmode","blue","midgrey"],"mappings":"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","file":"component---src-templates-tags-tsx-1c3ef75173a6823b10dd.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport { css } from '@emotion/core';\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\n// tag and author post lists\nconst SiteArchiveHeader = css`\n  .site-header-content {\n    position: relative;\n    align-items: stretch;\n    padding: 12vw 0 20px;\n    min-height: 200px;\n    max-height: 600px;\n  }\n`;\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          css={[SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main css={SiteMain}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n","import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && (\n            <Link to=\"/\">\n              | {config.title} {config.footer}\n            </Link>\n          )}\n        </section>\n        <SiteFooterNav>\n          {/* <Link to=\"/\">Latest Posts</Link> */}\n          {config.facebook && (\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n              Facebook\n            </a>\n          )}\n          {config.twitter && (\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n          )}\n\n          {/* <a href=\"https://github.com/scttcper/gatsby-casper\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Casper\n          </a> */}\n\n          {/* <a href=\"/rss.xml\">RSS</a> */}\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { Link } from 'gatsby';\nimport Img from 'gatsby-image';\n// import _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { AiFillStar } from 'react-icons/ai';\nimport { IconContext } from 'react-icons';\n\nimport { colors } from '../styles/colors';\nimport { PageContext } from '../templates/post';\n\nimport PostCardLinks from './PostCardLinks';\n\nexport interface PostCardProps {\n  post: PageContext;\n  large?: boolean;\n}\n\nexport const PostCard: React.FC<PostCardProps> = ({ post, large = false }) => {\n  // const date = new Date(post.frontmatter.date);\n  // const datetime = format(date, 'yyyy-MM-dd');\n  // const displayDatetime = format(date, 'dd LLL yyyy');\n  return (\n    <article\n      className={`post-card ${post.frontmatter.image ? '' : 'no-image'} ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {post.frontmatter.image && (\n        <Link className=\"post-card-image-link\" css={PostCardImageLink} to={post.fields.slug}>\n          <PostCardImage className=\"post-card-image\">\n            {post.frontmatter?.image?.childImageSharp?.fluid && (\n              <Img\n                alt={`${post.frontmatter.title} cover image`}\n                style={{ height: '100%' }}\n                fluid={post.frontmatter.image.childImageSharp.fluid}\n              />\n            )}\n          </PostCardImage>\n        </Link>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <Link className=\"post-card-content-link\" css={PostCardContentLink} to={post.fields.slug}>\n          <PostCardHeader className=\"post-card-header\">\n            {post.frontmatter.tags && (\n              <PostCardPrimaryTag className=\"post-card-primary-tag\">\n                {/* {post.frontmatter.tags[0]} */}\n                {post.frontmatter.tags.join(' ')}\n              </PostCardPrimaryTag>\n            )}\n\n            <IconContext.Provider value={{ color: 'gold', size: '0.75em' }}>\n              <PostCardTitle className=\"post-card-title\">\n                {post.frontmatter.featured && <AiFillStar/>} &nbsp;\n                {post.frontmatter.title}\n              </PostCardTitle>\n            </IconContext.Provider>\n          </PostCardHeader>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.frontmatter.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </Link>\n        <PostCardMeta className=\"post-card-meta\">\n          <PostCardLinks github={post.frontmatter.github} website={post.frontmatter.website} />\n          <PostCardBylineContent className=\"post-card-byline-content\">\n            <span className=\"post-card-byline-date\">\n              {/* <time dateTime={datetime}>{displayDatetime}</time>{' '} */}\n              <span className=\"bull\">&bull;</span> {post.timeToRead} min read\n            </span>\n          </PostCardBylineContent>\n        </PostCardMeta>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 40px;\n  padding: 0 20px 40px;\n  min-height: 220px;\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  /* @media (prefers-color-scheme: dark) { */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  /* } */\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    padding-bottom: 40px;\n    min-height: 280px;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nconst PostCardImageLink = css`\n  position: relative;\n  display: block;\n  overflow: hidden;\n  border-radius: 5px 5px 0 0;\n`;\n\nconst PostCardImage = styled.div`\n  width: auto;\n  height: 200px;\n  background: ${colors.lightgrey} no-repeat center center;\n  background-size: cover;\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentLink = css`\n  position: relative;\n  display: block;\n  color: ${colors.darkgrey};\n\n  :hover {\n    text-decoration: none;\n  }\n`;\n\nconst PostCardPrimaryTag = styled.div`\n  margin: 0 0 0.2em;\n  color: ${colors.blue};\n  font-size: 1.2rem;\n  font-weight: 500;\n  letter-spacing: 0.2px;\n  text-transform: uppercase;\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  // transition isn't working for some reason. \n  transition: color 0.2s ease-in-out;\n\n  /* @media (prefers-color-scheme: dark) { */\n    color: rgba(255, 255, 255, 0.85);\n  /* } */\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  /* @media (prefers-color-scheme: dark) { */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  /* } */\n`;\n\nconst PostCardMeta = styled.footer`\n  display: flex;\n  align-items: flex-start;\n  padding: 0;\n`;\n\nconst PostCardBylineContent = styled.div`\n  flex: 1 1 50%;\n  display: flex;\n  flex-direction: column;\n  margin: 4px 0 0 10px;\n  color: ${lighten('0.1', colors.midgrey)};\n  font-size: 1.2rem;\n  line-height: 1.4em;\n  font-weight: 400;\n  letter-spacing: 0.2px;\n  text-transform: uppercase;\n\n  span {\n    margin: 0;\n  }\n\n  a {\n    /* color: ${lighten('0.2', colors.darkgrey)}; */\n    color: rgba(255, 255, 255, 0.75);\n    font-weight: 600;\n  }\n\n  /* @media (prefers-color-scheme: dark) { */\n    /* a {\n      color: rgba(255, 255, 255, 0.75);\n    } */\n  /* } */\n`;\n\nconst PostCardHeader = styled.header`\n  margin: 15px 0 0;\n`;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/pages/perspectivewarptest.tsx","webpack:///./src/images/cardsOnGrid.png"],"names":["imgURL","fileURL","srcPoints","x","y","targetPoints","PerspectiveWarp","props","url","setUrl","useState","image","setImage","useEffect","img","Image","async","Promise","resolve","reject","onload","e","src","console","error","load","srcStyle","fill","r","font","fontFill","targStyle","css","lighten","colors","darkgrey","type","accept","onChange","files","target","length","URL","createObjectURL","points","clickHandler","style","onClick","targPoints","module","exports"],"mappings":"4FAAA,oHAaA,MAAMA,EAASC,IAITC,EAAY,CAChB,CACEC,EAAG,UACHC,EAAG,aAEL,CACED,EAAG,WACHC,EAAG,UAEL,CACED,EAAG,aACHC,EAAG,cAEL,CACED,EAAG,aACHC,EAAG,cAGDC,EAAe,CACnB,CACEF,EAAG,aACHC,EAAG,cAEL,CACED,EAAG,aACHC,EAAG,cAEL,CACED,EAAG,aACHC,EAAG,WAEL,CACED,EAAG,aACHC,EAAG,YAiGQE,UA3F0BC,IAEvC,MAAM,EAACC,EAAD,EAAMC,GAAUC,mBAASV,IACzB,EAACW,EAAD,EAAQC,GAAYF,qBAE1BG,oBAAU,KACR,IAAIC,EAAM,IAAIC,MAed,MAdaC,WACX,UACQ,IAAIC,QAAQ,CAACC,EAASC,KAC1BL,EAAIM,OAASC,IACXH,EAAQ,OAEVJ,EAAIQ,IAAMd,IAEZI,EAASE,GACT,MACAS,QAAQC,MAAM,6CAGlBC,GACO,KAELX,EAAIM,OAAS,OAEd,CAACZ,IAEJ,MAUMkB,EAAW,CAAEC,KAAM,UAAWC,EAAG,GAAIC,KAAM,aAAcC,SAAU,QACnEC,EAAY,IAAKL,EAAUC,KAAM,WAEvC,OACE,YAAC,IAAD,KACE,mBACEK,IAAKA,YAAF,2CAGqBC,YAAQ,MAAOC,IAAOC,UAH3C,oBAQH,qCAEE,qBAAOC,KAAK,SAEd,wCACA,0DAEE,qBAAOA,KAAK,OAAOC,OAAO,UAAUC,SA3BoBjB,IAC9D,IAAIkB,EAAQlB,EAAEmB,OAAOD,MACjBA,GAASA,EAAME,OAAS,GAC1BhC,EAAOiC,IAAIC,gBAAgBJ,EAAM,SA0B/B,YAAC,IAAD,CACEK,OAAQ1C,EACR2C,aAnC4DxB,MAoC5DV,MAAOA,EACPmC,MAAOpB,IAEa,IAArBxB,EAAUuC,QACT,YAAC,IAAD,CACEG,OAAQvC,EACRwC,aAxC6DxB,MAyC7DV,MAAOA,EACPmC,MAAOf,IAGc,IAAxB1B,EAAaoC,QACZ,sBACEM,QAAS,QADX,mBAQuB,IAAxB1C,EAAaoC,QAAgB9B,GAC5B,YAAC,IAAD,CAAcT,UAAWA,EAAW8C,WAAY3C,EAAcM,MAAOA,EAAOmC,MAAOf,Q,qBC5I7FkB,EAAOC,QAAU,IAA0B","file":"component---src-pages-perspectivewarptest-tsx-63c3c28b8ba88d4db5e3.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PageLayout from '../layouts/page-layout';\n\nimport CanvasPoints from '../components/CanvasPoints';\n\n// import fileURL from '../images/church.jpeg';\nimport fileURL from '../images/cardsOnGrid.png';\n\nimport { css } from '@emotion/core';\nimport { lighten } from 'polished';\nimport { colors } from '../styles/colors';\nimport CanvasWarped from '../components/CanvasWarped';\n\nconst imgURL = fileURL;\n\ninterface Props {}\n\nconst srcPoints = [\n  {\n    x: 544.46875,\n    y: 387.1953125,\n  },\n  {\n    x: 419.109375,\n    y: 493.8125,\n  },\n  {\n    x: 424.69921875,\n    y: 641.41015625,\n  },\n  {\n    x: 557.05078125,\n    y: 602.1328125,\n  },\n];\nconst targetPoints = [\n  {\n    x: 357.76953125,\n    y: 380.62890625,\n  },\n  {\n    x: 600.11328125,\n    y: 380.62890625,\n  },\n  {\n    x: 600.11328125,\n    y: 547.90625,\n  },\n  {\n    x: 357.76953125,\n    y: 547.90625,\n  },\n];\n\n\n// test the perspective warp with points already hardcoded. \nconst PerspectiveWarp: React.FC<Props> = props => {\n\n  const [url, setUrl] = useState(imgURL);\n  const [image, setImage] = useState<HTMLImageElement>();\n\n  useEffect(() => {\n    let img = new Image();\n    const load = async () => {\n      try {\n        await new Promise((resolve, reject) => {\n          img.onload = e => {\n            resolve(null);\n          };\n          img.src = url;\n        });\n        setImage(img);\n      } catch {\n        console.error('something went wrong drawing the image.');\n      }\n    };\n    load();\n    return () => {\n      // I think I can clean up state like this.\n      img.onload = null;\n    };\n  }, [url]);\n\n  const srcPointHandler: React.MouseEventHandler<HTMLCanvasElement> = e => {};\n\n  const targetPointHandler: React.MouseEventHandler<HTMLCanvasElement> = e => {};\n\n  const handleFiles: React.ChangeEventHandler<HTMLInputElement> = e => {\n    let files = e.target.files;\n    if (files && files.length > 0) {\n      setUrl(URL.createObjectURL(files[0]));\n    }\n  };\n  const srcStyle = { fill: '#fcba03', r: 12, font: '30px serif', fontFill: '#000' };\n  const targStyle = { ...srcStyle, fill: '#be2de2' };\n\n  return (\n    <PageLayout>\n      <div\n        css={css`\n          button {\n            margin-top: 10px;\n            background-color: ${lighten('0.2', colors.darkgrey)};\n            outline: none;\n          }\n        `}\n      >\n        <label>\n          Image url\n          <input type=\"url\" />\n        </label>\n        <button>load image</button>\n        <label>\n          Click here to upload an image.\n          <input type=\"file\" accept=\"image/*\" onChange={handleFiles} />\n        </label>\n        <CanvasPoints\n          points={srcPoints}\n          clickHandler={srcPointHandler}\n          image={image}\n          style={srcStyle}\n        />\n        {srcPoints.length === 4 && (\n          <CanvasPoints\n            points={targetPoints}\n            clickHandler={targetPointHandler}\n            image={image}\n            style={targStyle}\n          />\n        )}\n        {targetPoints.length === 4 && (\n          <button\n            onClick={() => {\n              // setShowWarped(true);\n            }}\n          >\n            Generate warped\n          </button>\n        )}\n        {targetPoints.length === 4 && image && (\n          <CanvasWarped srcPoints={srcPoints} targPoints={targetPoints} image={image} style={targStyle} />\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default PerspectiveWarp;\n","module.exports = __webpack_public_path__ + \"static/cardsOnGrid-0cd1e9e8a5c714a986fee239e5488623.png\";"],"sourceRoot":""}